generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  role          UserRole  @default(ADMIN) // <- todos nuevos ADMIN
  banned        Boolean?  @default(false)
  banReason     String?
  banExpires    DateTime?
  phone         String?

  sessions Session[]
  accounts Account[]
  Movement Movement[]

  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  expiresAt      DateTime
  token          String   @unique
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ðŸ‘‡ nombres que better-auth usa
  accountId  String
  providerId String

  accessToken           String?
  refreshToken          String?
  idToken               String?
  scope                 String?
  tokenType             String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  password              String? // si usas credenciales en el futuro

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("accounts")
}

model Verification {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  identifier String
  value      String // guarda el state serializado
  expiresAt  DateTime

  @@index([identifier])
  @@map("verifications")
}

model Movement {
  id        String   @id @default(cuid())
  concept   String
  amount    Float
  date      DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}
